var sprites = {
    ship: { sx: 0, sy: 0, w: 37, h: 42, frames: 1 },
    missile: { sx: 0, sy: 30, w: 2, h: 10, frames: 1 },
    fireball_1: { sx: 0, sy: 64, w: 64, h: 64, frames: 1 },
    fireball_2: { sx: 0, sy: 64, w: 64, h: 64, frames: 3 },
    fireball_3: { sx: 0, sy: 64, w: 64, h: 64, frames: 5 },
    fireball_4: { sx: 0, sy: 64, w: 64, h: 64, frames: 7 },
    enemy_purple: { sx: 37, sy: 0, w: 42, h: 43, frames: 1 }
};

var enemies = {
    // B, C y E substituirán a los valores por defecto definidos en la
    // variable baseParameters del constructor Enemy(). Ver
    // comentarios en el código del constructor al final del fichero.
    basic: { x: 100, y: -50, sprite: 'enemy_purple', B: 100, C: 4, E: 100 }
};


var startGame = function() {
    Game.setBoard(0,new Starfield(20,0.4,100,true))
    Game.setBoard(1,new Starfield(50,0.6,100))
    Game.setBoard(2,new Starfield(100,1.0,50));
    Game.setBoard(3,new TitleScreen("Alien Invasion", 
                                    "Press fire to start playing",
                                    playGame));
}


var playGame = function() {
    var board = new GameBoard();

    // Se añade un enemigo con las propiedades definidas en enemies.basic
    board.add(new Enemy(enemies.basic));
    // Se añade un enemigo con las propiedades definidas en
    // enemies.basic, pero con la propiedad x = 200 definida en el
    // segundo argumento de la llamada al constructor. Ver comentarios en el
    // constructor Enemy al final de este fichero.
    board.add(new Enemy(enemies.basic, { x: 200 }));

    board.add(new PlayerShip());
    Game.setBoard(3,board);
}


// Si se construye con clear==true no se pintan estrellas con fondo
// transparente, sino fondo en negro
var Starfield = function(speed,opacity,numStars,clear) {

    // Creamos un objeto canvas, no visible en la página Web
    var stars = $('<canvas/>')
	.attr('width', Game.width)
	.attr('height', Game.height)[0];
    // Sin jQuery lo hacemos asi:
    //    var stars = document.createElement("canvas");
    //    stars.width = Game.width; 
    //    stars.height = Game.height;


    var starCtx = stars.getContext("2d");

    var offset = 0;

    // Si la opción clear está activada, el fondo del canvas se pinta
    // de negro. Utilizado en el nivel mas profundo de estrellas
    if(clear) {
	starCtx.fillStyle = "#000";
	starCtx.fillRect(0,0,stars.width,stars.height);
    }

    // Dibujamos las estrellas blancas sobre el canvas no visible,
    // como rectángulos de 2 pixeles en posiciones aleatorias
    starCtx.fillStyle = "#FFF";
    starCtx.globalAlpha = opacity; // nivel de transparencia de las estrellas
    for(var i=0;i<numStars;i++) {
	starCtx.fillRect(Math.floor(Math.random()*stars.width),
			 Math.floor(Math.random()*stars.height),
			 2,
			 2);
    }

    // Se llama a este método en cada frame de la animación para dibujar
    // el campo de estrellas en la pantalla
    this.draw = function(ctx) {
	var intOffset = Math.floor(offset);
	var remaining = stars.height - intOffset;

	// Dibujar sobre el contexto ctx la parte de arriba del canvas con
	// las estrellas
	if(intOffset > 0) {
	    ctx.drawImage(stars,
			  0, remaining,
			  stars.width, intOffset,
			  0, 0,
			  stars.width, intOffset);
	}

	// Dibujar sobre el contexto ctx la parte inferior del canvas con
	// las estrellas
	if(remaining > 0) {
	    ctx.drawImage(stars,
			  0, 0,
			  stars.width, remaining,
			  0, intOffset,
			  stars.width, remaining);
	}
    }

    // En cada paso de la animación, movemos el campo de estrellas
    // modificando el offset según la cantidad de tiempo transcurrida
    this.step = function(dt) {
	offset += dt * speed; // velocidad = espacio / tiempo
	offset = offset % stars.height;
    }
}


// La clase PlayerShip tambien ofrece la interfaz step(), draw() para
// poder ser dibujada desde el bucle principal del juego
var PlayerShip = function() { 
    this.setup('ship', { vx: 0, reloadTime: 0.25, reloadTime2: 1, maxVel: 200 });
    this.reload2 = this.reloadTime2;
    this.reload = this.reloadTime;
    this.x = Game.width/2 - this.w / 2;
    this.y = Game.height - 10 - this.h;

    this.step = function(dt) {
		if(Game.keys['left']) { this.vx = -this.maxVel; }
		else if(Game.keys['right']) { this.vx = this.maxVel; }
		else { this.vx = 0; }

		this.x += this.vx * dt;

		if(this.x < 0) { this.x = 0; }
		else if(this.x > Game.width - this.w) { 
			this.x = Game.width - this.w;
		}

		this.reload-=dt;
		this.reload2-=dt;
		
		if(!Game.keys['fire']) this.up = true;
		
		if(this.up && Game.keys['fire'] && this.reload < 0){
			this.up=false;
			this.reload=this.reloadTime;
			// Se a